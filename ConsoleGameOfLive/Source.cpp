#include <iostream>
#include <windows.h>



/*
void test() {
	int x = 0, y = 0, ch = 0;

	while (1) {
		while (x < 119) {
			gotoxy(x, y);
			std::cout << ch << std::endl;
			x++;
			ch++;
			if (ch > 9)
				ch = 0;
		}
		x = 0;
		y++;
		if (y > 29)
			y = 0;
	}
}
*/

//{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0},




int printSpace(int (*array)[100], int X, int Y);
void recalc(int(*space)[100], int(*lives)[100], int X, int Y);
void gotoxy(int x, int y);
int testPrintSpace(int(*array)[100], int X, int Y);

int main() {
	const unsigned int X = 100;
	const unsigned int Y = 25;

	int p_playspace[Y][X] = {
						/*0*/				/*1*/					/*2*/				/*3*/				/*4*/				/*5*/					/*6*/				/*7*/				/*8*/				/*9*/				
		/*0 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*1 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*2 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*3 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*4 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*5 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*6 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*7 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*8 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*9 */	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*10*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*11*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*12*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*13*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*14*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*15*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*16*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*17*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*18*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*19*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*20*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*21*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*22*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*23*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

		/*24*/	{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0},

	};
	
	/*
	int playspace[X][Y];

	for (int i = 0; i < X; i++) {
		for (int j = 0; j < Y; j++)
			playspace[i][j] = p_playspace[j][i];

	}
	*/
	//printSpace(p_playspace, 60, 10);
	int counteroflives[Y][X] = { 0 };
	//system("pause");
	while (1) {
		
		gotoxy(0, 0);
		recalc(p_playspace, counteroflives, X, Y);
		printSpace(p_playspace, X, Y);
		//testPrintSpace(counteroflives, 60, 10);
		//system("pause");
	}
	//printSpace(p_playspace, 60, 10);
	
	return 0;
}

void gotoxy(int x, int y) {
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}


int printSpace(int (*array)[100],int X, int Y ) {
	


	for (int i = 0; i < Y; i++)
	{
		for (int j = 0; j < X; j++)
		{	
			//printf("%d", array[i][j]);
			
			if (array[i][j] == 1)
				printf("#");
			else
				printf(" ");
				
		}
		printf("\n");
	}
	return 0;

}

int testPrintSpace(int(*array)[100], int X, int Y) {

	for (int i = 0; i < Y; i++)
	{
		for (int j = 0; j < X; j++)
		{
			printf("%d", array[i][j]);

			//if (array[i][j] == 1)
			//	printf("#");
			//else
			//	printf(" ");

		}
		printf("\n");
	}
	return 0;

}

void recalc(int(*space)[100], int(*lives)[100], int X, int Y) {

	int xx = 0, yy = 0;

	for (int i = 0; i < X; i++) {
		for (int j = 0; j < Y; j++) {

			if (space[j][i] == 1) {
				if (i != 0){
					lives[j][i - 1] ++;


					if (space[j][i - 1] == 0 && lives[j][i - 1] == 3)
						space[j][i - 1] = 1;
					if (space[j][i - 1] == 1 && ( lives[j][i - 1] <2 || lives[j][i - 1] >3) )
						space[j][i - 1] = 0;
				}
				if (j != 0) {
					lives[j - 1][i] ++;
					if (space[j - 1][i] == 0 && lives[j - 1][i] == 3)
						space[j - 1][i] = 1;
					if (space[j - 1][i] == 1 && (lives[j - 1][i] < 2 || lives[j - 1][i] >3))
						space[j - 1][i] = 0;
				}

				if (i != X - 1) {
					lives[j][i + 1] ++;
					if (space[j][i + 1] == 0 && lives[j][i + 1] == 3)
						space[j][i + 1] = 1;
					if (space[j][i + 1] == 1 && (lives[j][i + 1] < 2 || lives[j][i + 1] >3))
						space[j][i + 1] = 0;
				}
				if (j != Y - 1) {
					lives[j + 1][i] ++;
					if (space[j + 1][i] == 0 && lives[j + 1][i] == 3)
						space[j + 1][i] = 1;
					if (space[j + 1][i] == 1 && (lives[j + 1][i] < 2 || lives[j + 1][i] >3))
						space[j + 1][i] = 0;
				}
			}
		}
	}
	/*
	for (int i = 0; i < X; i++) {
		for (int j = 0; j < Y; j++) {
			if (space[j][i] == 0 && lives[j][i] == 3)
				space[j][i] = 1;
			if (space[j][i] == 1 && (lives[j][i] < 2 || lives[j][i] >3)) {
				space[j + 1][i] = 0;
				if (i != 0) {
					lives[j][i - 1] --;
				}
				if (j != 0) {
					lives[j - 1][i] --;
				}

				if (i != X - 1) {
					lives[j][i + 1] --;
				}
				if (j != Y - 1) {
					lives[j + 1][i] --;
				}

				
			
			}
			//костыль 
			if (lives[j][i] > 3)
				lives[j][i] = 1;
		}
	}*/
}

void otherCalc(int(*space)[100], int(*lives)[100], int X, int Y) {

	int xx = 0, yy = 0;

	for (int i = 0; i < X; i++) {
		for (int j = 0; j < Y; j++) {

			if (space[j][i] == 1) {
				if (i != 0) {
					lives[j][i - 1] ++;


					if (space[j][i - 1] == 0 && lives[j][i - 1] == 3)
						space[j][i - 1] = 1;
					if (space[j][i - 1] == 1 && (lives[j][i - 1] < 2 || lives[j][i - 1] >3))
						space[j][i - 1] = 0;
				}
				if (j != 0) {
					lives[j - 1][i] ++;
					if (space[j - 1][i] == 0 && lives[j - 1][i] == 3)
						space[j - 1][i] = 1;
					if (space[j - 1][i] == 1 && (lives[j - 1][i] < 2 || lives[j - 1][i] >3))
						space[j - 1][i] = 0;
				}

				if (i != X - 1) {
					lives[j][i + 1] ++;
					if (space[j][i + 1] == 0 && lives[j][i + 1] == 3)
						space[j][i + 1] = 1;
					if (space[j][i + 1] == 1 && (lives[j][i + 1] < 2 || lives[j][i + 1] >3))
						space[j][i + 1] = 0;
				}
				if (j != Y - 1) {
					lives[j + 1][i] ++;
					if (space[j + 1][i] == 0 && lives[j + 1][i] == 3)
						space[j + 1][i] = 1;
					if (space[j + 1][i] == 1 && (lives[j + 1][i] < 2 || lives[j + 1][i] >3))
						space[j + 1][i] = 0;
				}
			}
		}
	}

}